<?php


namespace App\Services;


use App\User;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Routing\RouteCollection;
use Illuminate\Routing\Router;
use Illuminate\Support\Facades\Auth;

class ControllerCaller
{
    protected $uri;
    protected $method;
    protected $params;
    protected $tmpAuthUser;
    protected $prevAuthUser;

    public function setUri($uri)
    {
        $this->uri = $uri;
    }

    public function setMethod($method)
    {
        $this->method = $method;
    }

    public function setParams($params)
    {
        $this->params = $params;
    }

    public function setAuthUser(User $user)
    {
        $this->prevAuthUser = Auth::user();
        $this->tmpAuthUser = $user;
        Auth::login($this->tmpAuthUser);
    }

    public function returnPrevAuthUser()
    {
        Auth::login($this->prevAuthUser);
    }

    public function callAction()
    {
        $action = $this->getAction();
        $className = explode('@', $action->getActionName())[0];
        $method = explode('@', $action->getActionName())[1];
        $reflectionMethod = new \ReflectionMethod($className, $method);
        $parameters = $reflectionMethod->getParameters();
        $params = [];
        /** @var \ReflectionParameter $parameter */
        foreach ($parameters as $key => $parameter) {
            if ($key == 0) {
                $requestName = $parameter->getClass()->getName();
                $newRequest = new $requestName($this->params);
                $params[$parameter->getName()] = $newRequest;
            } else {
                $reflectionClass = $parameter->getClass();
                try {
                    $obj = new $reflectionClass->name;
                    $obj = $obj::query()->find($action->parameters()[$parameter->getName()]);
                    $params[$parameter->getName()] = $obj;
                } catch (\Throwable $e) {
                    $params[$parameter->getName()] = $action->parameters()[$parameter->getName()];
                }
            }
        }
        return call_user_func_array([app($className), $method], $params);
    }

    protected function getAction(): Route
    {
        /** @var Request $request */
        $request = app('request');
        /** @var Router $router */
        $router = app('router');
        /** @var RouteCollection $routes */
        $routes = $router->getRoutes();
        $specRequest = $request->create($this->uri, $this->method, $this->params);
        /** @var Route $action */
        return $routes->match($specRequest);
    }
}
